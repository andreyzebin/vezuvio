#!/bin/bash -eu
set -u

# install types
# 1.  OS local install by Admin
#     - requires sudo elevation
#     - LOCAL_APPS_PATH="/usr/local/bin"
#     - VEZUVIO_HOME=/opt/vezuvio or VEZUVIO_HOME=/home/vezuvio/.vezuvio
#     - durable between shell sessions
#     - available between users
#     - expose app to shell
#     - - via $LOCAL_APPS_PATH or
#     - - via .bashrc
#     - - via prompt
#     - - via snippet after install
#     - - - $> ln -s "${VEZUVIO_HOME}"/bin/vezuvio "${LOCAL_APPS_PATH}"/vezuvio
#     - USABLE_GRADLE=./gradlew
# 2.  user home install
#     - best for office machine with strict access policy
#     - not requires sudo
#     - USABLE_GRADLE=gradle
#     - LOCAL_APPS_PATH=$(echo ~/bin)
#     - VEZUVIO_HOME=$(echo ~/.vezuvio)
#     - HOME=$(echo ~)
#     - LOCAL_APPS_PATH must exist in PATH
#     - - if [[ ! PATH==*"$LOCAL_APPS_PATH"* ]] ; then
#     - - $> echo '# set PATH so it includes user's private bin if it exists' >> ~/.profile
#     - - $> echo 'if [ -d "$HOME/bin" ] ; then PATH="$HOME/bin:$PATH" fi' >> ~/.profile
#     - - fi
# 3.  shell session install
#     - best for CI
#     - non-interactive
#     - may be cached durably between sessions
#     - - using '2. user home install' dirs for cache
#     - - VEZUVIO_HOME, USABLE_GRADLE
#     - only session guaranteed availability
#     - via alias 'vezuvio=$VEZUVIO_HOME/bin/vezuvio'

unset USE_SOFT_LINK_EMULATION
unset USE_GRADLE_WRAPPER
unset USE_INTERACTIVE_ELEVATION
unset VEZUVIO_HOME


# default path when you have an Admin rights
USABLE_PATHS_LOCAL_BIN="/usr/local/bin"

# default path when you have strict office access rights
# shellcheck disable=SC2116
USABLE_PATHS_HOME_BIN=$(echo ~/bin)

LOCAL_APPS_PATH=$USABLE_PATHS_LOCAL_BIN

# OS=Windows_NT
if [[ "${OS-}" == "Windows_NT" ]]; then
  USE_SOFT_LINK_EMULATION=1
fi

if [[ -n "${CI-}" ]]
then
  echo "Running in CI -  Working directory level install";
  echo "In order to run - use: .vezuvio/bin/vezuvio";

  # shellcheck disable=SC2116
  vezuvioHome=$(echo .vezuvio)
  export VEZUVIO_HOME=$vezuvioHome
else
  if [ -x /usr/bin/sudo ]; then
      echo "You are an admin - OS level install";
      USE_GRADLE_WRAPPER=1
      USE_INTERACTIVE_ELEVATION=1

      # shellcheck disable=SC2116
        vezuvioHome=$(echo ~/.vezuvio)
        export VEZUVIO_HOME=$vezuvioHome
  else
      echo "You are not an admin - User level install";
      LOCAL_APPS_PATH=$USABLE_PATHS_HOME_BIN

      # shellcheck disable=SC2116
        vezuvioHome=$(echo ~/.vezuvio)
        export VEZUVIO_HOME=$vezuvioHome
  fi
fi

# store if we're sourced or not in a variable
(return 0 2>/dev/null) && SOURCED=1 || SOURCED=0
if [ "$SOURCED" == "1" ]; then
    echo "Install is run using source."
fi

abort() {
  printf "%s\n" "$@" >&2
  if [ "$SOURCED" == "1" ]; then
    return 1;
  fi
  exit 1;
}

# Fail fast with a concise message when not using bash
# Single brackets are needed here for POSIX compatibility
# shellcheck disable=SC2292
if [ -z "${BASH_VERSION:-}" ]
then
  abort "Bash is required to interpret this script."
fi

# Check if script is run with force-interactive mode in CI
if [[ -n "${CI-}" && -n "${INTERACTIVE-}" ]]
then
  abort "Cannot run force-interactive mode in CI."
fi

# Check if both `INTERACTIVE` and `NONINTERACTIVE` are set
# Always use single-quoted strings with `exp` expressions
# shellcheck disable=SC2016
if [[ -n "${INTERACTIVE-}" && -n "${NONINTERACTIVE-}" ]]
then
  abort 'Both `$INTERACTIVE` and `$NONINTERACTIVE` are set. Please unset at least one variable and try again.'
fi

# Check if script is run in POSIX mode
if [[ -n "${POSIXLY_CORRECT+1}" ]]
then
  abort 'Bash must not run in POSIX mode. Please unset POSIXLY_CORRECT and try again.'
fi

# string formatters
if [[ -t 1 ]]
then
  tty_escape() { printf "\033[%sm" "$1"; }
else
  tty_escape() { :; }
fi
tty_mkbold() { tty_escape "1;$1"; }
tty_underline="$(tty_escape "4;39")"
tty_blue="$(tty_mkbold 34)"
tty_red="$(tty_mkbold 31)"
tty_bold="$(tty_mkbold 39)"
tty_reset="$(tty_escape 0)"

shell_join() {
  local arg
  printf "%s" "$1"
  shift
  for arg in "$@"
  do
    printf " "
    printf "%s" "${arg// /\ }"
  done
}

chomp() {
  printf "%s" "${1/"$'\n'"/}"
}

logTitleL1() {
  printf "${tty_blue}==>${tty_bold} %s${tty_reset}\n" "$(shell_join "$@")"
}

warn() {
  printf "${tty_red}Warning${tty_reset}: %s\n" "$(chomp "$1")" >&2
}

usage() {
  cat <<EOS
Vesuvius Installer
Usage: [NONINTERACTIVE=1] [CI=1] install.sh [options]
    -h, --help       Display this message.
    NONINTERACTIVE   Install without prompting for user input
    CI               Install in CI mode (e.g. do not prompt for user input)
EOS
  abort "${1:-0}"
}

while [[ $# -gt 0 ]]
do
  case "$1" in
    -h | --help) usage ;;
    *)
      warn "Unrecognized option: '$1'"
      usage 1
      ;;
  esac
done

# Check if script is run non-interactively (e.g. CI)
# If it is run non-interactively we should not prompt for passwords.
# Always use single-quoted strings with `exp` expressions
# shellcheck disable=SC2016
if [[ -z "${NONINTERACTIVE-}" ]]
then
  if [[ -n "${CI-}" ]]
  then
    warn 'Running in non-interactive mode because `$CI` is set.'
    NONINTERACTIVE=1
  elif [[ ! -t 0 ]]
  then
    if [[ -z "${INTERACTIVE-}" ]]
    then
      warn 'Running in non-interactive mode because `stdin` is not a TTY.'
      NONINTERACTIVE=1
    else
      warn 'Running in interactive mode despite `stdin` not being a TTY because `$INTERACTIVE` is set.'
    fi
  fi
else
  logTitleL1 'Running in non-interactive mode because `$NONINTERACTIVE` is set.'
fi

# USER isn't always set so provide a fall back for the installer and subprocesses.
if [[ -z "${USER-}" ]]
then
  USER="$(chomp "$(id -un)")"
  export USER
fi

# First check OS.
OS="$(uname)"
if [[ "${OS}" == "Linux" ]]
then
  VEZUVIO_ON_LINUX=1
elif [[ "${OS}" == "Darwin" ]]
then
  VEZUVIO_ON_MACOS=1
elif [[ "${OS}" == MINGW* ]]
then
  VEZUVIO_ON_MINGW=1
else
  abort "Vesuvius is only supported on macOS and Linux."
fi

execute() {
  if ! "$@"
  then
    abort "$(printf "Failed during: %s" "$(shell_join "$@")")"
  fi
}

retry() {
  local tries="$1" n="$1" pause=2
  shift
  if ! "$@"
  then
    while [[ $((--n)) -gt 0 ]]
    do
      warn "$(printf "Trying again in %d seconds: %s" "${pause}" "$(shell_join "$@")")"
      sleep "${pause}"
      ((pause *= 2))
      if "$@"
      then
        return
      fi
    done
    abort "$(printf "Failed %d times doing: %s" "${tries}" "$(shell_join "$@")")"
  fi
}

# TODO: bump version when new macOS is released or announced
MACOS_NEWEST_UNSUPPORTED="16.0"
# TODO: bump version when new macOS is released
MACOS_OLDEST_SUPPORTED="13.0"

# For Vesuvius on Linux
REQUIRED_CURL_VERSION=7.41.0
REQUIRED_GIT_VERSION=2.7.0
REQUIRED_GRADLE_VERSION=7.5.0
# java 17
REQUIRED_JAVA_VERSION=170

# ---------------------------------------

major_minor() {
  echo "${1%%.*}.$(
    x="${1#*.}"
    echo "${x%%.*}"
  )"
}

version_gt() {
  [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -gt "${2#*.}" ]]
}
version_ge() {
  [[ "${1%.*}" -gt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -ge "${2#*.}" ]]
}
version_lt() {
  [[ "${1%.*}" -lt "${2%.*}" ]] || [[ "${1%.*}" -eq "${2%.*}" && "${1#*.}" -lt "${2#*.}" ]]
}

check_run_command_as_root() {
  [[ "${EUID:-${UID}}" == "0" ]] || return

  # Allow Azure Pipelines/GitHub Actions/Docker/Concourse/Kubernetes to do everything as root (as it's normal there)
  [[ -f /.dockerenv ]] && return
  [[ -f /run/.containerenv ]] && return
  [[ -f /proc/1/cgroup ]] && grep -E "azpl_job|actions_job|docker|garden|kubepods" -q /proc/1/cgroup && return

  abort "Don't run this as root!"
}

test_curl() {
  if [[ ! -x "$1" ]]
  then
    return 1
  fi

  if [[ "$1" == "/snap/bin/curl" ]]
  then
    warn "Ignoring $1 (curl snap is too restricted)"
    return 1
  fi

  local curl_version_output curl_name_and_version
  curl_version_output="$("$1" --version 2>/dev/null)"
  curl_name_and_version="${curl_version_output%% (*}"
  version_ge "$(major_minor "${curl_name_and_version##* }")" "$(major_minor "${REQUIRED_CURL_VERSION}")"
}

test_git() {

  if [[ ! -x "$1" ]]
  then
    return 1
  fi

  local git_version_output
  git_version_output="$("$1" --version 2>/dev/null)"
  if [[ "${git_version_output}" =~ "git version "([^ ]*).* ]]
  then
    version_ge "$(major_minor "${BASH_REMATCH[1]}")" "$(major_minor "${REQUIRED_GIT_VERSION}")"
  else
    abort "Unexpected Git version: '${git_version_output}'!"
  fi
}

test_gradle() {

  if [[ ! -x "$1" ]]
  then
    return 1
  fi

  local gradle_version_output
  gradle_version_output="$("$1" --version 2>/dev/null | grep Gradle)"
  # echo "raw version  $gradle_version_output"
  if [[ "${gradle_version_output}" =~ "Gradle "([^ ]*).* ]]
  then
    # echo "setting version  ${BASH_REMATCH[1]}"
    local usable_GRADLE_VERSION="${BASH_REMATCH[1]}"
    version_ge "$(major_minor "${usable_GRADLE_VERSION}")" "$(major_minor "${REQUIRED_GRADLE_VERSION}")"
  else
    abort "Unexpected Gradle version: '${gradle_version_output}'!"
  fi
}

# Search for the given executable in PATH (avoids a dependency on the `which` command)
which() {
  # Alias to Bash built-in command `type -P`
  type -P "$@"
}

# Search PATH for the specified program that satisfies Vesuvius requirements
# function which is set above
# shellcheck disable=SC2230
find_tool() {
  if [[ $# -ne 1 ]]
  then
    return 1
  fi

  local executable
  while read -r executable
  do
    if [[ "${executable}" != /* ]]
    then
      warn "Ignoring ${executable} (relative paths don't work)"
    elif "test_$1" "${executable}"
    then
      echo "${executable}"
      break
    fi
  done < <(which -a "$1")
}

# -------

unset HAVE_SUDO_ACCESS # unset this from the environment

have_sudo_access() {
  if [[ ! -x "/usr/bin/sudo" ]]
  then
    return 1
  fi

  local -a SUDO=("/usr/bin/sudo")
  if [[ -n "${SUDO_ASKPASS-}" ]]
  then
    SUDO+=("-A")
  elif [[ -n "${NONINTERACTIVE-}" ]]
  then
    SUDO+=("-n")
  fi

  if [[ -z "${HAVE_SUDO_ACCESS-}" ]]
  then
    if [[ -n "${NONINTERACTIVE-}" ]]
    then
      "${SUDO[@]}" -l mkdir &>/dev/null
    else
      "${SUDO[@]}" -v && "${SUDO[@]}" -l mkdir &>/dev/null
    fi
    HAVE_SUDO_ACCESS="$?"
  fi

  if [[ -n "${VEZUVIO_ON_MACOS-}" ]] && [[ "${HAVE_SUDO_ACCESS}" -ne 0 ]]
  then
    abort "Need sudo access on macOS (e.g. the user ${USER} needs to be an Administrator)!"
  fi

  return "${HAVE_SUDO_ACCESS}"
}

# shellcheck disable=SC2016

if [[ -n "${USE_INTERACTIVE_ELEVATION-}" ]]
then
  logTitleL1 'Checking for `sudo` access (may request your password)...'
  [[ "${EUID:-${UID}}" == "0" ]] || have_sudo_access
elif ! [[ -w "${VEZUVIO_HOME}" ]] &&
     # ! [[ -w "/home" ]] &&
     ! have_sudo_access
then
  abort "$(
    cat <<EOABORT
Insufficient permissions to install Vesuvius to "${VEZUVIO_HOME}" (the default prefix).
EOABORT
  )"
fi

# check_run_command_as_root

if [[ -d "${VEZUVIO_HOME}" && ! -x "${VEZUVIO_HOME}" ]]
then
  abort "The Vesuvius home ${tty_underline}${VEZUVIO_HOME}${tty_reset} exists but is not searchable. Use sudo chmod 775 ${VEZUVIO_HOME}"
fi

if [[ -n "${VEZUVIO_ON_MACOS-}" ]]
then
  macos_version="$(major_minor "$(/usr/bin/sw_vers -productVersion)")"
  if version_lt "${macos_version}" "10.7"
  then
    abort "Your Mac OS X version is too old."
  elif version_lt "${macos_version}" "10.11"
  then
    abort "Your OS X version is too old."
  elif version_ge "${macos_version}" "${MACOS_NEWEST_UNSUPPORTED}" ||
       version_lt "${macos_version}" "${MACOS_OLDEST_SUPPORTED}"
  then
    who="We"
    what=""
    if version_ge "${macos_version}" "${MACOS_NEWEST_UNSUPPORTED}"
    then
      what="pre-release version"
    else
      who+=" (and Apple)"
      what="old version"
    fi
    logTitleL1 "You are using macOS ${macos_version}."
    logTitleL1 "${who} do not provide support for this ${what}."

    echo "$(
      cat <<EOS
This installation may not succeed.
EOS
    )
" | tr -d "\\"
  fi
fi

USABLE_GIT=/usr/bin/git
if [[ -n "${VEZUVIO_ON_LINUX-}" || -n "${VEZUVIO_ON_MINGW-}" ]]
then
  USABLE_GIT="$(find_tool git)"
  if [[ -z "$(command -v git)" ]]
  then
    abort "You must install Git before installing Vesuvius."
  fi
  if [[ -z "${USABLE_GIT}" ]]
  then
    abort "The version of Git that was found does not satisfy requirements for Vesuvius."
  fi
  if [[ "${USABLE_GIT}" != /usr/bin/git ]]
  then
    export VEZUVIO_GIT_PATH="${USABLE_GIT}"
    logTitleL1 "Found Git: ${VEZUVIO_GIT_PATH}"
  fi
fi

if ! command -v curl >/dev/null
then
  abort "You must install cURL before installing Vesuvius."
elif [[ -n "${VEZUVIO_ON_LINUX-}" || -n "${VEZUVIO_ON_MINGW-}" ]]
then
  USABLE_CURL="$(find_tool curl)"
  if [[ -z "${USABLE_CURL}" ]]
  then
    abort "The version of cURL that was found does not satisfy requirements for Vesuvius."
  elif [[ "${USABLE_CURL}" != /usr/bin/curl ]]
  then
    export VEZUVIO_CURL_PATH="${USABLE_CURL}"
    logTitleL1 "Found cURL: ${VEZUVIO_CURL_PATH}"
  fi
fi

# if not using wrapper
if [ -z "${USE_GRADLE_WRAPPER-}" ]; then
  if ! command -v gradle >/dev/null
  then
    abort "You must install Gradle before installing Vesuvius."
  elif [[ -n "${VEZUVIO_ON_LINUX-}" || -n "${VEZUVIO_ON_MINGW-}" ]]
  then
    USABLE_GRADLE="$(find_tool gradle)"
    if [[ -z "${USABLE_GRADLE}" ]]
    then
      abort "The version of Gradle that was found does not satisfy requirements for Vesuvius."
    elif [[ "${USABLE_GRADLE}" != /usr/bin/gradle ]]
    then
      export VEZUVIO_GRADLE_PATH="${USABLE_GRADLE}"
      logTitleL1 "Found Gradle at ${VEZUVIO_GRADLE_PATH}"
    fi
  fi
else
  USABLE_GRADLE=./gradlew
fi

if [[ -n "${JAVA_HOME-}" ]] && [[ -x "$JAVA_HOME/bin/java" ]]; then
  # USABLE_JAVA=${JAVA_HOME}/bin/java
  # execute "$USABLE_JAVA" -version
  # There is java - now lets check if its a JDK...


  USABLE_JAVA=${JAVA_HOME}/bin/java
  USABLE_JAVAC=${JAVA_HOME}/bin/javac
  if [[ ! -f ${USABLE_JAVAC} ]]; then
    abort "JAVA_HOME is set to JRE. But JDK is required"
  fi
  JAVA_VER=$($USABLE_JAVA -version 2>&1 | awk -F '"' '/version/ {print $2}' | awk -F '.' '{sub("^$", "0", $2); print $1$2}')
  if [ ! "$JAVA_VER" -ge "$REQUIRED_JAVA_VERSION" ]; then
    abort "Minimum JDK is 17!"
  fi
  logTitleL1 "Found JDK at ${JAVA_HOME}, version: $(awk -v var1="$JAVA_VER" -v var2=10 'BEGIN { print  ( var1 / var2 ) }')"
else
  abort "JAVA_HOME is not set. JDK is Required"
fi

# $ if [ "/c/Users/THINKPAD/.vezuvio" == "$(echo ~/.vezuvio)" ]; then echo "Equal"; else echo "NotEqual";  fi
# >Equal

logTitleL1 "Your bin paths:"
IN="$PATH"
mails=$(echo "$IN" | tr ":" " ")
for addr in $mails
do
    if [[ $addr == */bin* ]]; then
      echo -"[$addr]"
    fi
done

logTitleL1 "This script will install:"
echo "${VEZUVIO_HOME}/repository/"
echo "${VEZUVIO_HOME}/bin/vezuvio"
if [[ ! -n "${CI-}" ]]
then
  echo "${LOCAL_APPS_PATH}/vezuvio"
fi

vezuvioTest () {
        # shellcheck disable=SC2139
        alias vezuvio="$VEZUVIO_HOME/bin/vezuvio"
        echo "Use alias=$VEZUVIO_HOME/bin/vezuvio"
}

currentDir=$(pwd)
{
    logTitleL1 "Installing vezuvio..."
    mkdir -p "${VEZUVIO_HOME}"
    cd "${VEZUVIO_HOME}"
    if [ ! -d repository ]; then
      mkdir repository
      logTitleL1 " - Downloading vezuvio sources..."
      execute "${USABLE_GIT}" clone https://github.com/andreyzebin/vezuvio.git repository
    fi
    cd repository
    logTitleL1 " - Pulling latest vezuvio sources..."
    execute "${USABLE_GIT}" pull

    logTitleL1 " - Installing binaries..."
    cp -rf bin "${VEZUVIO_HOME}"/
    chmod u+x "${VEZUVIO_HOME}"/bin/vezuvio
    logTitleL1 " - Installing configurations..."
    cp -rf etc "${VEZUVIO_HOME}"/

    if [[ -z "${CI-}" ]]; then
      logTitleL1 " - Expose app to shell..."
      mkdir -p "${LOCAL_APPS_PATH}"
      if [[ -n ${USE_SOFT_LINK_EMULATION-} ]]; then
        logTitleL1 " - - Using soft link emulation for windows..."
         # soft link emulation for window's git bash
        cat bin/softLinkEmu > "${LOCAL_APPS_PATH}"/vezuvio
      else
        if [ -f "${LOCAL_APPS_PATH}"/vezuvio ]; then
          if [ ! "$(readlink "${LOCAL_APPS_PATH}"/vezuvio)" == "${VEZUVIO_HOME}"/bin/vezuvio ]; then
            # Overwrite
            if have_sudo_access; then
              sudo ln -sf "${VEZUVIO_HOME}"/bin/vezuvio "${LOCAL_APPS_PATH}"/vezuvio
            else
              ln -sf "${VEZUVIO_HOME}"/bin/vezuvio "${LOCAL_APPS_PATH}"/vezuvio
            fi
          fi
        else
          if have_sudo_access; then
            sudo ln -s "${VEZUVIO_HOME}"/bin/vezuvio "${LOCAL_APPS_PATH}"/vezuvio
          else
            ln -s "${VEZUVIO_HOME}"/bin/vezuvio "${LOCAL_APPS_PATH}"/vezuvio
          fi
        fi
      fi

      logTitleL1 "Checking installation result..."
      logTitleL1 " - Testing if sources are buildable..."
      execute "${USABLE_GRADLE}" -PisProduction=1 clean build -x test
      logTitleL1 " - Executing: 'vezuvio --version'..."
      vezuvio --version
    else
      logTitleL1 " - Executing: 'vezuvio --version'..."
      vezuvioTest --version
    fi
} || {
    cd "$currentDir"
    abort "Installation failed!"
}
cd "$currentDir"
logTitleL1 "Installation successful!"

# export JAVA_HOME=/c/Users/THINKPAD/.gradle/jdks/eclipse_adoptium-17-amd64-windows.2
# /c/Users/THINKPAD//.gradle/wrapper/dists/gradle-8.13-bin/5xuhj0ry160q40clulazy9h7d/gradle-8.13/bin/gradle